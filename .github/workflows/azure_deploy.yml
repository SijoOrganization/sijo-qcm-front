name: Build, Deploy Frontend to Azure Container Registry and Update Virtual Machine

permissions:
  contents: read

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Clean old images in ACR (keep buildcache and 1 backup)
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |
            repo="sijo-qcm-front"
            acr_name="${{ secrets.ACR_NAME }}"
            # Vérifier si le repository existe
            if ! az acr repository show --name $acr_name --repository $repo > /dev/null 2>&1; then
              echo "Repository $repo does not exist in $acr_name, skipping cleanup."
              exit 0
            fi
            digests=($(az acr repository show-manifests --name $acr_name --repository $repo --orderby time_desc --query "[].digest" -o tsv | head -n 5))
            all_digests=($(az acr repository show-manifests --name $acr_name --repository $repo --query "[].digest" -o tsv))
            for digest in "${all_digests[@]}"; do
              if [[ " ${digests[*]} " == *" $digest "* ]]; then
                continue
              fi
              # Pour chaque tag, vérifier s'il pointe sur ce digest et si c'est buildcache
              tags=$(az acr repository show-tags --name $acr_name --repository $repo -o tsv)
              keep_digest=false
              for tag in $tags; do
                tag_digest=$(az acr repository show-manifests --name $acr_name --repository $repo --query "[?tags[?@=='$tag']].digest" -o tsv)
                if [[ "$tag" == "buildcache" && "$tag_digest" == "$digest" ]]; then
                  keep_digest=true
                  break
                fi
              done
              if [[ "$keep_digest" == true ]]; then
                continue
              fi
              echo "Deleting old image with digest $digest"
              az acr repository delete --name $acr_name --image $repo@$digest --yes
            done

      - name: Create and use Buildx builder (docker-container)
        run: |
          docker buildx create --use --name mybuilder --driver docker-container || docker buildx use mybuilder

      - name: Build and push Docker image
        id: docker_build
        run: |
          docker buildx build \
            --cache-from=type=registry,ref=${{ secrets.ACR_SERVER }}/sijo-qcm-front:buildcache \
            --cache-to=type=registry,ref=${{ secrets.ACR_SERVER }}/sijo-qcm-front:buildcache,mode=max \
            --push -t ${{ secrets.ACR_SERVER }}/sijo-qcm-front:${{ github.sha }} .

  deploy-vm:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy frontend container on Azure VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            docker login ${{ secrets.ACR_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
            docker stop sijo-qcm-front || true
            docker rm sijo-qcm-front || true
            docker system prune -af --volumes
            docker volume prune -f
            docker image prune -af
            docker builder prune -af
            docker pull ${{ secrets.ACR_SERVER }}/sijo-qcm-front:${{ github.sha }}
            docker run -d --restart=always --name sijo-qcm-front -p 80:80 \
              ${{ secrets.ACR_SERVER }}/sijo-qcm-front:${{ github.sha }}
